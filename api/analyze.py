import json
import asyncio
import os
import random
import gc
import smtplib
from email.mime.text import MIMEText
from flask import Blueprint, request, jsonify
import aiohttp

# --- Blueprint ---
analyze_endpoint = Blueprint('analyze_endpoint', __name__)

# --- C·∫•u h√¨nh ---
GOOGLE_API_KEYS_STR = os.environ.get('GOOGLE_API_KEYS')
SAFE_BROWSING_API_KEY = os.environ.get('SAFE_BROWSING_API_KEY')
if not GOOGLE_API_KEYS_STR:
    raise ValueError("Bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEYS l√† b·∫Øt bu·ªôc.")
GOOGLE_API_KEYS = [key.strip() for key in GOOGLE_API_KEYS_STR.split(',') if key.strip()]

APPS_SCRIPT_URL = os.environ.get('APPS_SCRIPT_URL')
GMAIL_USER = os.environ.get('GMAIL_USER')
GMAIL_APP_PASSWORD = os.environ.get('GMAIL_APP_PASSWORD')

# --- H√ÄM H·ªñ TR·ª¢ ---
async def check_urls_safety_optimized(urls: list):
    if not SAFE_BROWSING_API_KEY or not urls: return []
    safe_browsing_url = f"https://safebrowsing.googleapis.com/v4/threatMatches:find?key={SAFE_BROWSING_API_KEY}"
    payload = {"threatInfo": {"threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"], "platformTypes": ["ANY_PLATFORM"], "threatEntryTypes": ["URL"], "threatEntries": [{"url": url} for url in urls[:5]]}}
    try:
        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(safe_browsing_url, json=payload) as resp:
                if resp.status == 200: return (await resp.json()).get("matches", [])
                return []
    except Exception as e:
        print(f"üî¥ [URL Check] Failed: {e}")
        return []

# --- LU·ªíNG 1: G·ªåI DB-AI QUA GOOGLE APPS SCRIPT ---
async def call_gas_db_ai(text: str):
    if not APPS_SCRIPT_URL:
        print("üî¥ [GAS] APPS_SCRIPT_URL is not set. Skipping DB-AI.")
        return {"found": False, "reason": "GAS URL not configured."}
    payload = {"text": text}
    try:
        timeout = aiohttp.ClientTimeout(total=20)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(APPS_SCRIPT_URL, json=payload) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    error_text = await resp.text()
                    print(f"üî¥ [GAS] Error. Status: {resp.status}, Response: {error_text}")
                    return {"found": False, "reason": f"GAS returned status {resp.status}"}
    except Exception as e:
        print(f"üî¥ [GAS] Exception: {e}")
        return {"found": False, "reason": f"Exception: {str(e)}"}

# --- LU·ªíNG 2: ANNA-AI & FEEDBACK LOOP ---

# *** PROMPT M·ªöI ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ·ªû ƒê√ÇY ***
def create_anna_ai_prompt(text: str) -> str:
    """T·∫°o prompt chi ti·∫øt cho Anna, d·ª±a tr√™n y√™u c·∫ßu m·ªõi c·ªßa ng∆∞·ªùi d√πng."""
    # Ghi ch√∫: Ph·∫ßn {keywords} ƒë√£ ƒë∆∞·ª£c l∆∞·ª£c b·ªè ƒë·ªÉ gi·ªØ cho server Render nh·∫π nh·∫•t c√≥ th·ªÉ.
    return f"""
B·∫°n l√† h·ªá th·ªëng ph√¢n t√≠ch an to√†n th√¥ng minh. Nhi·ªám v·ª•: ph√°t hi·ªán v√† ph√¢n lo·∫°i ƒëa lo·∫°i (multi-type) c√°c nguy c∆° trong tin nh·∫Øn.

‚ö° Khi n√†o flag ("is_dangerous": true):
1. L·ª´a ƒë·∫£o/phishing:
   - ∆Øu ƒë√£i "qu√° t·ªët ƒë·ªÉ tin"
   - K√™u g·ªçi h√†nh ƒë·ªông kh·∫©n c·∫•p, t·∫°o √°p l·ª±c
   - Y√™u c·∫ßu cung c·∫•p th√¥ng tin c√° nh√¢n (t√†i kho·∫£n, OTP, m·∫≠t kh·∫©u) qua link l·∫°
   - URL/domain ƒë√°ng ng·ªù, gi·∫£ m·∫°o th∆∞∆°ng hi·ªáu
2. Qu·∫•y r·ªëi/toxic:
   - Ng√¥n ng·ªØ th√¥ t·ª•c, x√∫c ph·∫°m, ƒëe d·ªça, kh·ªßng b·ªë tinh th·∫ßn
3. N·ªôi dung nh·∫°y c·∫£m/ch√≠nh tr·ªã:
   - K√≠ch ƒë·ªông b·∫°o l·ª±c, n·ªïi lo·∫°n, ch·ªëng ph√° ch√≠nh quy·ªÅn
   - Ph√°t t√°n tin sai l·ªách g√¢y hoang mang
4. Kh√°c:
   - Spam h√†ng lo·∫°t, qu·∫£ng c√°o r√°c
   - N·ªôi dung c√≥ t√≠nh √©p bu·ªôc ho·∫∑c thao t√∫ng t√¢m l√Ω

‚ö° Safe-case (kh√¥ng flag):
- Meme, ch√¢m bi·∫øm vui, kh√¥ng h·∫°i ai
- Link t·ª´ domain ch√≠nh th·ªëng (vd: *.gov.vn, *.google.com)
- Th·∫£o lu·∫≠n ch√≠nh tr·ªã trung l·∫≠p, kh√¥ng k√™u g·ªçi h√†nh ƒë·ªông
- Th√¥ng b√°o d·ªãch v·ª• h·ª£p ph√°p, minh b·∫°ch
- N·ªôi dung l·ªãch s·ª≠, tr√≠ch d·∫´n vƒÉn h·ªçc, b√†i h√°t, t√†i li·ªáu gi√°o d·ª•c ch√≠nh th·ªëng.

‚ö° Output JSON (ng·∫Øn g·ªçn):
- "is_dangerous" (boolean)
- "reason" (string, ‚â§ 2 c√¢u, t√≥m r√µ nh·∫•t v√¨ sao flag/kh√¥ng flag)
- "types" (string, nhi·ªÅu lo·∫°i c√°ch nhau b·∫±ng d·∫•u ph·∫©y, v√≠ d·ª•: "scam, phishing, toxic")
- "score" (0-5)  # 0 = an to√†n, 5 = r·∫•t nguy hi·ªÉm
- "recommend" (string, h√†nh ƒë·ªông c·ª• th·ªÉ: vd "xo√° tin", "b·ªè qua", "c·∫£nh gi√°c v·ªõi link")

ƒêo·∫°n tin nh·∫Øn: {text}
"""

async def analyze_with_anna_ai_http(text: str):
    """Ph√¢n t√≠ch chuy√™n s√¢u v·ªõi Anna qua HTTP Request tr·ª±c ti·∫øp (si√™u nh·∫π)."""
    api_key = random.choice(GOOGLE_API_KEYS)
    gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    prompt = create_anna_ai_prompt(text[:2500])
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "temperature": 0.2, "maxOutputTokens": 400, "responseMimeType": "application/json",
        }
    }
    try:
        timeout = aiohttp.ClientTimeout(total=25)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(gemini_url, json=payload) as resp:
                if resp.status == 200:
                    response_json = await resp.json()
                    json_text = response_json['candidates'][0]['content']['parts'][0]['text']
                    result = json.loads(json_text)
                    print("‚úÖ [Anna-AI] Analysis successful via HTTP.")
                    return result
                else:
                    error_text = await resp.text()
                    print(f"üî¥ [Anna-AI] HTTP Error! Status: {resp.status}, Response: {error_text}")
                    return {"error": f"Anna-AI API Error {resp.status}", "status_code": 500}
    except Exception as e:
        print(f"üî¥ [Anna-AI] HTTP Exception: {e}")
        return {"error": "Anna-AI analysis failed due to exception.", "status_code": 500}

def _send_sync_email(original_text, analysis_result):
    if not GMAIL_USER or not GMAIL_APP_PASSWORD:
        print("üü° [Email] Credentials not set. Skipping notification.")
        return
    subject = "[CyberShield Report] Y√™u c·∫ßu b·ªï sung CSDL"
    body = f"""M·ªôt tin nh·∫Øn m·ªõi ƒë√£ ƒë∆∞·ª£c Anna-AI ph√¢n t√≠ch.
Vui l√≤ng xem x√©t v√† b·ªï sung v√†o Google Sheets n·∫øu c·∫ßn thi·∫øt.
----------------------------------------------------------
TIN NH·∫ÆN G·ªêC:
{original_text}
----------------------------------------------------------
K·∫æT QU·∫¢ PH√ÇN T√çCH:
{json.dumps(analysis_result, indent=2, ensure_ascii=False)}
"""
    to_email = 'duongpham18210@gmail.com'
    msg = MIMEText(body, 'plain', 'utf-8')
    msg['From'], msg['To'], msg['Subject'] = GMAIL_USER, to_email, subject
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(GMAIL_USER, GMAIL_APP_PASSWORD)
        server.sendmail(GMAIL_USER, to_email, msg.as_string())
        server.quit()
        print("‚úÖ [Email] Feedback email sent successfully.")
    except Exception as e:
        print(f"üî¥ [Email] Failed to send feedback email: {e}")

async def send_email_notification(original_text, analysis_result):
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, _send_sync_email, original_text, analysis_result)

# --- H√ÄM ƒêI·ªÄU PH·ªêI CH√çNH ---
async def perform_full_analysis(text: str, urls: list):
    final_result = None
    is_new_case = False
    
    print("‚û°Ô∏è [Flow] Starting Lu·ªìng 1: Calling GAS DB-AI...")
    gas_result = await call_gas_db_ai(text)

    if gas_result.get("found"):
        print("‚úÖ [Flow] Lu·ªìng 1 successful. Found match in database.")
        final_result = gas_result.get("data")
    else:
        print(f"üü° [Flow] Lu·ªìng 1 negative (Reason: {gas_result.get('reason', 'Unknown')}). Starting Lu·ªìng 2: Anna-AI...")
        is_new_case = True
        final_result = await analyze_with_anna_ai_http(text)

    if 'error' in final_result:
        return final_result

    if urls:
        url_matches = await check_urls_safety_optimized(urls)
        if url_matches:
            final_result.update({'url_analysis': url_matches, 'is_dangerous': True, 'score': max(final_result.get('score', 0), 4), 'reason': (final_result.get('reason', '') + " + Unsafe URLs")[:100]})

    if is_new_case:
        print("‚û°Ô∏è [Flow] Scheduling feedback email for new case.")
        asyncio.create_task(send_email_notification(text, final_result))
    
    gc.collect()
    return final_result

# --- ENDPOINTS ---
@analyze_endpoint.route('/analyze', methods=['POST'])
async def analyze_text():
    try:
        data = request.get_json(silent=True)
        if not data or 'text' not in data: return jsonify({'error': 'Invalid request format'}), 400
        text = data.get('text', '').strip()
        
        print(f"--------------------\nüì¨ [Input] Received text: '{text[:100]}...'")
        if not text: return jsonify({'error': 'No text to analyze'}), 400
        
        result = await perform_full_analysis(text[:3000], data.get('urls', []))
        
        if 'error' in result:
            return jsonify({'error': result['error']}), result.get('status_code', 500)
        
        print("‚úÖ [Response] Sent result back to client.")
        return jsonify({'result': result})
    except Exception as e:
        print(f"üî¥ [FATAL] Server error in analyze_text: {e}")
        gc.collect()
        return jsonify({'error': 'Internal server error'}), 500

@analyze_endpoint.route('/health', methods=['GET'])
async def health_check():
    return jsonify({'status': 'healthy', 'architecture': 'GAS + Anna-AI (HTTP)'})
