import json
import asyncio
import os
import random
import gc
from flask import Blueprint, request, jsonify
import aiohttp

# --- Gmail API imports ---
import base64
from email.mime.text import MIMEText
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials

# --- Blueprint ---
analyze_endpoint = Blueprint('analyze_endpoint', __name__)

# --- C·∫•u h√¨nh ---
GOOGLE_API_KEYS_STR = os.environ.get('GOOGLE_API_KEYS')
SAFE_BROWSING_API_KEY = os.environ.get('SAFE_BROWSING_API_KEY')
if not GOOGLE_API_KEYS_STR:
    raise ValueError("Bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEYS l√† b·∫Øt bu·ªôc.")
GOOGLE_API_KEYS = [key.strip() for key in GOOGLE_API_KEYS_STR.split(',') if key.strip()]

APPS_SCRIPT_URL = os.environ.get('APPS_SCRIPT_URL')
GMAIL_TOKEN_PATH = os.environ.get('GMAIL_TOKEN_PATH', '/etc/secrets/token.json')

# --- H√ÄM G·ª¨I EMAIL QUA GMAIL API ---
def send_email_gmail_api(to_email, subject, body):
    creds = Credentials.from_authorized_user_file(GMAIL_TOKEN_PATH, ['https://www.googleapis.com/auth/gmail.send'])
    service = build('gmail', 'v1', credentials=creds)
    message = MIMEText(body)
    message['to'] = to_email
    message['subject'] = subject
    raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
    result = service.users().messages().send(userId='me', body={'raw': raw}).execute()
    return result

# --- H√ÄM H·ªñ TR·ª¢ KI·ªÇM TRA URL ---
async def check_urls_safety_optimized(urls: list):
    if not SAFE_BROWSING_API_KEY or not urls: return []
    print("‚û°Ô∏è  [Ki·ªÉm tra URL] B·∫Øt ƒë·∫ßu ki·ªÉm tra URL v·ªõi Google Safe Browsing...")
    safe_browsing_url = f"https://safebrowsing.googleapis.com/v4/threatMatches:find?key={SAFE_BROWSING_API_KEY}"
    payload = {"threatInfo": {"threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"], "platformTypes": ["ANY_PLATFORM"], "threatEntryTypes": ["URL"], "threatEntries": [{"url": url} for url in urls[:5]]}}
    try:
        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(safe_browsing_url, json=payload) as resp:
                if resp.status == 200:
                    matches = (await resp.json()).get("matches", [])
                    print(f"‚úÖ [Ki·ªÉm tra URL] Ho√†n t·∫•t. T√¨m th·∫•y {len(matches)} k·∫øt qu·∫£ kh√¥ng an to√†n.")
                    return matches
                print(f"üü° [Ki·ªÉm tra URL] API tr·∫£ v·ªÅ tr·∫°ng th√°i {resp.status}.")
                return []
    except Exception as e:
        print(f"üî¥ [Ki·ªÉm tra URL] Th·∫•t b·∫°i: {e}")
        return []

# --- LU·ªíNG 1: G·ªåI "ƒêI·ªÜP VI√äN LEO" QUA GOOGLE APPS SCRIPT ---
async def call_gas_db_ai(text: str):
    if not APPS_SCRIPT_URL:
        print("üî¥ [Leo] L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng APPS_SCRIPT_URL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        return {"found": False, "reason": "GAS URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."}
    payload = {"text": text}
    try:
        timeout = aiohttp.ClientTimeout(total=20)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(APPS_SCRIPT_URL, json=payload) as resp:
                if resp.status == 200:
                    print("‚úÖ [Leo] Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi th√†nh c√¥ng t·ª´ GAS.")
                    return await resp.json()
                else:
                    error_text = await resp.text()
                    print(f"üî¥ [Leo] L·ªói t·ª´ GAS. Tr·∫°ng th√°i: {resp.status}, Ph·∫£n h·ªìi: {error_text}")
                    return {"found": False, "reason": f"GAS tr·∫£ v·ªÅ l·ªói {resp.status}"}
    except Exception as e:
        print(f"üî¥ [Leo] L·ªói k·∫øt n·ªëi ƒë·∫øn GAS: {e}")
        return {"found": False, "reason": f"Ngo·∫°i l·ªá: {str(e)}"}

# --- LU·ªíNG 2: ANNA-AI & B·ªò N√ÉO TƒÇNG C∆Ø·ªúNG ---
def create_anna_ai_prompt(text: str, context_hint: str = None):
    hint_section = ""
    if context_hint:
        hint_section = f"""
---
**TH√îNG TIN T√åNH B√ÅO B·ªî SUNG (QUAN TR·ªåNG):**
H·ªá th·ªëng Leo ƒë√£ cung c·∫•p m·ªôt g·ª£i √Ω v·ªÅ b·ªëi c·∫£nh c·ªßa tin nh·∫Øn n√†y. H√£y ∆∞u ti√™n th√¥ng tin n√†y khi ph√¢n t√≠ch:
"{context_hint}"
---
"""
    return f"""
You are Anna, a cybersecurity analyst with high emotional intelligence, specialized in evaluating Vietnamese messages.  
Your mission is to protect users from **all deliberate and clear online threats**, including but not limited to:  
- **Scams / phishing / data theft**  
- **School violence / physical threats**  
- **Hate speech / incitement of violence / discrimination**  
- **Anti-state propaganda / harmful extremism**  
- **Other harmful behaviors with potential direct danger**  

‚ö†Ô∏è Golden Rule: **Default every message as SAFE** unless there is undeniable evidence of malicious intent AND a harmful action.  
Do not overflag casual jokes, memes, venting, or normal friendly chats.  

{hint_section}

Follow strictly the 3-step framework:

---
**STEP 1: NOISE FILTER**

* Core question: "Does this message contain enough content to analyze?"  
* Action: If the message is too short (<4 words), vague, or only an emoji/expression without context ‚Üí **conclude SAFE immediately**.  
* Never flag as dangerous just because of one negative word without clear harmful context.  

---
**STEP 2: CONTEXT & INTENT**

* Core question: "Is this from a stranger with malicious intent, or just friends joking/venting?"  
* Default assumption: Treat all conversations as **friendly and harmless**, unless there is undeniable evidence otherwise.  
* Actions:  
    * **Language:** If negative words can be used jokingly, sarcastically, or casually ‚Üí treat as SAFE.  
    * **Emotion:** If it‚Äôs just venting, exaggeration, or temporary anger without targeting someone specifically ‚Üí SAFE.  
    * **Action:** Only consider risky if the message **calls for a harmful action** (e.g., sending money, sharing info, meeting a stranger, physical violence, inciting hate/propaganda).  

---
**STEP 3: EVIDENCE-BASED CONCLUSION**

* Golden Rule: **Only mark DANGEROUS if there is clear malicious intent AND a specific harmful action.**  
* Actions:  
    * **DANGEROUS:** If strong evidence exists ‚Üí mark true with score 1‚Äì5.  
    * **SAFE:** All other cases, or if uncertain ‚Üí mark false with score 0.  

---
**Output JSON (in Vietnamese):**
- "is_dangerous": (boolean)  
- "reason": (string, gi·∫£i th√≠ch ng·∫Øn g·ªçn logic c·ªßa b·∫°n)  
- "types": (string: one of ["scam", "violence", "hate_speech", "anti_state", "other"])  
- "score": (0-5)  
- "recommend": (string)  

**TIN NH·∫ÆN C·∫¶N PH√ÇN T√çCH:** "{text}"
"""

async def analyze_with_anna_ai_http(text: str, context_hint: str = None):
    api_key = random.choice(GOOGLE_API_KEYS)
    gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"    
    prompt = create_anna_ai_prompt(text[:3000], context_hint)
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": { "temperature": 0.2, "maxOutputTokens": 400, "responseMimeType": "application/json" }
    }
    try:
        timeout = aiohttp.ClientTimeout(total=25)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            print(f"‚û°Ô∏è  [Anna] ƒêang g·ª≠i y√™u c·∫ßu ph√¢n t√≠ch t·ªõi Google AI...")
            async with session.post(gemini_url, json=payload) as resp:
                if resp.status == 200:
                    response_json = await resp.json()
                    if not response_json.get('candidates'):
                        print(f"üî¥ [Anna] L·ªói! Ph·∫£n h·ªìi kh√¥ng c√≥ 'candidates'. B·ªã b·ªô l·ªçc an to√†n ch·∫∑n. Chi ti·∫øt: {response_json}")
                        return {'error': 'BLOCKED_BY_GOOGLE', 'message': 'B·ªã b·ªô l·ªçc an to√†n c·ªßa Google ch·∫∑n.'}
                    json_text = response_json['candidates'][0]['content']['parts'][0]['text']
                    result = json.loads(json_text)
                    print("‚úÖ [Anna] Ph√¢n t√≠ch th√†nh c√¥ng.")
                    return result
                else:
                    error_text = await resp.text()
                    print(f"üî¥ [Anna] L·ªói HTTP! Tr·∫°ng th√°i: {resp.status}, Ph·∫£n h·ªìi: {error_text}")
                    return {"error": f"L·ªói API Anna {resp.status}", "status_code": 500}
    except Exception as e:
        print(f"üî¥ [Anna] L·ªói ngo·∫°i l·ªá khi g·ªçi HTTP: {e}")
        return {"error": "Ph√¢n t√≠ch v·ªõi Anna th·∫•t b·∫°i do c√≥ ngo·∫°i l·ªá.", "status_code": 500}

# --- H√ÄM ƒêI·ªÄU PH·ªêI CH√çNH ---
async def perform_full_analysis(text: str, urls: list):
    final_result = None
    is_new_case_by_anna = False
    context_hint_from_leo = None
    
    print(f"üìú [B·∫Øt ƒë·∫ßu] Ph√¢n t√≠ch tin nh·∫Øn: '{text[:4000]}'")
    print("‚û°Ô∏è [Lu·ªìng 1] B·∫Øt ƒë·∫ßu g·ªçi ƒêi·ªáp vi√™n Leo (GAS)...")
    gas_result = await call_gas_db_ai(text)

    if gas_result and gas_result.get("found"):
        result_type = gas_result.get("type")
        if result_type == "trivial_pattern":
            print("‚úÖ [Lu·ªìng 1] TH√ÄNH C√îNG. Leo x√°c ƒë·ªãnh tin nh·∫Øn l√† t·∫ßm th∆∞·ªùng (Trivial).")
            return {'is_dangerous': False, 'reason': 'Tin nh·∫Øn qu√° ƒë∆°n gi·∫£n ƒë·ªÉ ph√¢n t√≠ch.', 'score': 0, 'types': 'Trivial'}
        elif result_type == "dangerous_pattern":
            print("‚úÖ [Lu·ªìng 1] TH√ÄNH C√îNG. T√¨m th·∫•y trong S·ªï ƒêen (Blacklist) b·∫±ng AI.")
            final_result = gas_result.get("data")
        elif result_type == "context_hint":
            print("üìù [Lu·ªìng 1] Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t√¨nh b√°o t·ª´ Leo.")
            context_hint_from_leo = gas_result.get("data")
            
    if final_result is None:
        if context_hint_from_leo:
            print(f"üü° [Lu·ªìng 2] B·∫Øt ƒë·∫ßu g·ªçi Anna-AI v·ªõi th√¥ng tin t√¨nh b√°o: '{context_hint_from_leo}'")
        else:
            print(f"üü° [Lu·ªìng 2] B·∫Øt ƒë·∫ßu g·ªçi Anna-AI (kh√¥ng c√≥ th√¥ng tin t√¨nh b√°o).")
        final_result = await analyze_with_anna_ai_http(text, context_hint_from_leo)
        print(f"üìÑ [K·∫øt qu·∫£ c·ªßa Anna] Ph√¢n t√≠ch AI tr·∫£ v·ªÅ: {json.dumps(final_result, ensure_ascii=False)}")
        if 'error' in final_result:
            return final_result
        is_new_case_by_anna = True 
    
    if urls:
        url_matches = await check_urls_safety_optimized(urls)
        if url_matches:
            print(f"‚ö†Ô∏è [Ph√¢n t√≠ch URL] Ph√°t hi·ªán {len(url_matches)} URL kh√¥ng an to√†n! C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng.")
            final_result.update({'url_analysis': url_matches, 'is_dangerous': True, 'score': max(final_result.get('score', 0), 4), 'reason': (final_result.get('reason', '') + " + C√°c URL kh√¥ng an to√†n")[:100]})

    if is_new_case_by_anna and final_result.get("is_dangerous"):
        print("‚û°Ô∏è [Ph·∫£n h·ªìi] Ph√°t hi·ªán ca nguy hi·ªÉm m·ªõi. L√™n l·ªãch g·ª≠i email b·∫±ng Gmail API...")
        try:
            send_email_gmail_api(
                to_email="duongpham18210@gmail.com",
                subject=f"[CyberShield Report] Nguy hi·ªÉm m·ªõi: {final_result.get('types', 'Kh√¥ng x√°c ƒë·ªãnh')} (ƒêi·ªÉm: {final_result.get('score', 'N/A')})",
                body=f"""M·ªôt tin nh·∫Øn m·ªõi ƒë√£ ƒë∆∞·ª£c Anna-AI ph√¢n t√≠ch v√† g·∫Øn c·ªù NGUY HI·ªÇM.
Vui l√≤ng xem x√©t v√† b·ªï sung v√†o Google Sheets.
----------------------------------------------------------
TIN NH·∫ÆN G·ªêC:
{text}
----------------------------------------------------------
K·∫æT QU·∫¢ PH√ÇN T√çCH:
{json.dumps(final_result, indent=2, ensure_ascii=False)}
"""
            )
            print("‚úÖ [Email] G·ª≠i email c·∫£nh b√°o th√†nh c√¥ng qua Gmail API.")
        except Exception as e:
            print(f"üî¥ [Email] G·ª≠i email c·∫£nh b√°o th·∫•t b·∫°i qua Gmail API: {e}")

    gc.collect()
    print(f"üèÅ [K·∫øt th√∫c] Ph√¢n t√≠ch ho√†n t·∫•t cho tin nh·∫Øn: '{text[:50]}...'")
    return final_result

# --- ENDPOINTS ---
@analyze_endpoint.route('/analyze', methods=['POST'])
async def analyze_text():
    try:
        data = request.get_json(silent=True)
        if not data or 'text' not in data: return jsonify({'error': 'ƒê·ªãnh d·∫°ng y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}), 400
        text = data.get('text', '').strip()
        print(f"--------------------\nüì¨ [ƒê·∫ßu v√†o] Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn: '{text[:1000]}...'")
        if not text: return jsonify({'error': 'Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch'}), 400
        result = await perform_full_analysis(text[:3000], data.get('urls', []))
        if 'error' in result:
            return jsonify({'error': result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}), result.get('status_code', 500)
        print("‚úÖ [Ph·∫£n h·ªìi] ƒê√£ g·ª≠i k·∫øt qu·∫£ v·ªÅ cho client.")
        return jsonify({'result': result})
    except Exception as e:
        print(f"üî¥ [L·ªñI NGHI√äM TR·ªåNG] L·ªói server trong h√†m analyze_text: {e}")
        gc.collect()
        return jsonify({'error': 'L·ªói n·ªôi b·ªô server'}), 500

@analyze_endpoint.route('/health', methods=['GET'])
async def health_check():

    return jsonify({'status': 'B√¨nh th∆∞·ªùng', 'architecture': 'Trivial Filter + Blacklist (AI) + Context Hints + Anna-AI'})
