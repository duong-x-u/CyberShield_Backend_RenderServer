from dotenv import load_dotenv
load_dotenv()

import os
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, jsonify
from flask_cors import CORS
from flask_login import LoginManager

# --- Kh·ªüi t·∫°o ·ª®ng d·ª•ng Flask tr∆∞·ªõc khi import blueprints ---
app = Flask(__name__, template_folder='templates', static_folder='static')
app.config['SECRET_KEY'] = os.environ.get('FLASK_SECRET_KEY', os.urandom(24))
CORS(app)

# ƒê·∫£m b·∫£o bi·∫øn 'app' c√≥ th·ªÉ ƒë∆∞·ª£c Gunicorn t√¨m th·∫•y
application = app  # Alias cho Gunicorn n·∫øu c·∫ßn

# --- Kh·ªüi t·∫°o LoginManager ---
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "admin_blueprint.login"

# --- Import c√°c Blueprints sau khi app ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ---
# S·ª≠ d·ª•ng import c√≥ ƒëi·ªÅu ki·ªán ƒë·ªÉ tr√°nh crash
analyze_endpoint = None
webhook_blueprint = None
admin_blueprint = None

try:
    from api.analyze import analyze_endpoint
    print("‚úÖ analyze_endpoint imported successfully")
except ImportError as e:
    print(f"‚ö†Ô∏è Cannot import analyze_endpoint: {e}")
except Exception as e:
    print(f"‚ùå Error importing analyze_endpoint: {e}")

try:
    from webhook import webhook_blueprint
    print("‚úÖ webhook_blueprint imported successfully")
except ImportError as e:
    print(f"‚ö†Ô∏è Cannot import webhook_blueprint: {e}")
except Exception as e:
    print(f"‚ùå Error importing webhook_blueprint: {e}")

try:
    from admin import admin_blueprint
    print("‚úÖ admin_blueprint imported successfully")
except ImportError as e:
    print(f"‚ö†Ô∏è Cannot import admin_blueprint: {e}")
except Exception as e:
    print(f"‚ùå Error importing admin_blueprint: {e}")

# Debug: In ra c√°c bi·∫øn c√≥ trong module
print(f"üìã Module variables: {[var for var in dir() if not var.startswith('_')]}")
print(f"üöÄ Flask app instance: {app}")
print(f"üîß App name: {app.name}")

# --- C·∫•u h√¨nh Logging N√¢ng cao ---
LOG_FILE = "cybershield.log"

# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
log_dir = os.path.dirname(LOG_FILE) if os.path.dirname(LOG_FILE) else '.'
os.makedirs(log_dir, exist_ok=True)

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        RotatingFileHandler(LOG_FILE, maxBytes=10485760, backupCount=5, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- User loader cho Flask-Login ---
@login_manager.user_loader
def load_user(user_id):
    # TODO: Implement user loading logic
    # V√≠ d·ª•: return User.get(user_id)
    return None

# --- ƒêƒÉng k√Ω c√°c Blueprints n·∫øu import th√†nh c√¥ng ---
if analyze_endpoint:
    app.register_blueprint(analyze_endpoint, url_prefix='/api')
    logger.info("Registered analyze_endpoint blueprint")

if webhook_blueprint:
    app.register_blueprint(webhook_blueprint)  # Webhook ·ªü root
    logger.info("Registered webhook_blueprint")

if admin_blueprint:
    app.register_blueprint(admin_blueprint, url_prefix='/admin')
    logger.info("Registered admin_blueprint")

# --- C√°c Route C∆° b·∫£n ---

@app.route('/')
def home():
    """Home endpoint - cyberpunk gaming vibe"""
    return jsonify({
        'banner': '‚ö° WELCOME TO ARENA OF CYBERSHIELD ‚ö°',
        'status': 'üü¢ S·∫µn S√†ng',
        'version': '1.0.0',
        'server': '0xCyb3r-Sh13ld',
        'message': [
            "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Server c·ªßa Cyber Shield",
            "K·∫ª ƒë·ªãch s·∫Ω xu·∫•t tr·∫≠n sau 5 gi√¢y"
        ]
    })

@app.route('/health')
def health_check():
    return jsonify({
        'status': 'üü¢ Systems Nominal',
        'hp': '100/100',
        'mana': '‚àû',
        'latency_ms': 5,
        'service': 'cybershield-backend',
        'note': 'T·∫ø ƒë√†n c√≤n ·ªïn'
    })

# --- Error Handlers ---

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': '‚ùå 404: Page Not Found ://'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {str(error)}")
    return jsonify({'error': 'üí• 500: Quay v·ªÅ ph√≤ng th·ªß. T·∫ø ƒë√†n b·ªã t·∫•n c√¥ng'}), 500

@app.errorhandler(ImportError)
def import_error(error):
    logger.error(f"Import error: {str(error)}")
    return jsonify({'error': 'üîß Module import failed'}), 500

# --- Ch·∫°y Server ---
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting CyberShield server on port {port}")
    
    # Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng
    if not os.environ.get('FLASK_SECRET_KEY'):
        logger.warning("FLASK_SECRET_KEY not set, using random key")
    
    app.run(host='0.0.0.0', port=port, debug=False)

# ƒê·∫£m b·∫£o bi·∫øn app lu√¥n c√≥ s·∫µn cho Gunicorn
print(f"üéØ Final check - app variable: {app}")
print(f"üéØ App is callable: {callable(app)}")

# Export app cho WSGI servers
__all__ = ['app']
