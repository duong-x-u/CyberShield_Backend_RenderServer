from dotenv import load_dotenv
load_dotenv()
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import os
import logging
from api.analyze import analyze_endpoint
from webhook import webhook_blueprint  # Import Blueprint t·ª´ file webhook.py
from zalo_webhook import zalo_blueprint
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Register blueprints
app.register_blueprint(analyze_endpoint, url_prefix='/api')
app.register_blueprint(webhook_blueprint, url_prefix='/messenger') # ƒêƒÉng k√Ω Blueprint c·ªßa webhook
app.register_blueprint(zalo_blueprint, url_prefix='/zalo') # <-- M·ªöI: ƒêƒÉng k√Ω Blueprint c·ªßa Zalo


@app.route('/')
def home():
    """Home endpoint - cyberpunk gaming vibe"""
    return jsonify({
        'banner': '‚ö° WELCOME TO ARENA OF CYBERSHIELD ‚ö°',
        'status': 'üü¢ S·∫µn S√†ng',
        'version': '1.0.0',
        'server': '0xCyb3r-Sh13ld',
        'message': [
    "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Server c·ªßa Cyber Shield",
    "K·∫ª ƒë·ªãch s·∫Ω xu·∫•t tr·∫≠n sau 5 gi√¢y"]
    })

@app.route('/health')
def health_check():
    return jsonify({
        'status': 'üü¢ Systems Nominal',
        'hp': '100/100',
        'mana': '‚àû',
        'latency_ms': 5,
        'service': 'cybershield-backend',
        'note': 'T·∫ø ƒë√†n c√≤n ·ªïn'
    })

@app.route('/zalo_verifierJIUJTRN25q5owArPZi8IPNVYeZkRb7LZE3Gm.html')
def zalo_domain_verification():
    try:
        # Flask s·∫Ω t√¨m file n√†y trong th∆∞ m·ª•c 'static' m√† b·∫°n v·ª´a t·∫°o
        return send_file('static/JIUJTRN25q5owArPZi8IPNVYeZkRb7LZE3Gm.html')
    except FileNotFoundError:
        return "Verification file not found.", 404


@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': '‚ùå 404: Page Not Found ://'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {str(error)}")
    return jsonify({'error': 'üí• 500: Quay v·ªÅ ph√≤ng th·ªß. T·∫ø ƒë√†n b·ªã t·∫•n c√¥ng'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
