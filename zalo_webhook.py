import os
import json
import asyncio
from flask import Blueprint, request, jsonify
import aiohttp

# Import b·ªô n√£o AI (d√πng chung v·ªõi Messenger)
from api.analyze import perform_full_analysis

# --- C·∫•u h√¨nh Zalo ---
zalo_blueprint = Blueprint('zalo_blueprint', __name__)
APP_ID = os.environ.get('ZALO_APP_ID')
VERIFY_TOKEN = os.environ.get('ZALO_VERIFY_TOKEN') # Token b·∫°n t·ª± ƒë·ªãnh nghƒ©a
ACCESS_TOKEN = os.environ.get('ZALO_ACCESS_TOKEN')
CONVERSATION_DELAY = 1.5

# --- H√†m G·ª≠i Tin Nh·∫Øn Zalo (Async) ---
async def send_zalo_message(recipient_id, message_text):
    """G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi d√πng Zalo qua OA API."""
    API_URL = 'https://openapi.zalo.me/v3.0/oa/message/cs'
    headers = {'access_token': ACCESS_TOKEN}
    payload = {
        'recipient': {'user_id': recipient_id},
        'message': {'text': message_text}
    }
    
    try:
        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(API_URL, json=payload, headers=headers) as resp:
                if resp.status == 200:
                    print(f"‚úÖ G·ª≠i tin nh·∫Øn Zalo th√†nh c√¥ng ƒë·∫øn user_id: {recipient_id}")
                    return True
                else:
                    error_data = await resp.json()
                    print(f"üî¥ L·ªói khi g·ª≠i tin nh·∫Øn Zalo: {resp.status} - {error_data}")
                    return False
    except Exception as e:
        print(f"üî¥ L·ªói ngo·∫°i l·ªá khi g·ª≠i tin nh·∫Øn Zalo: {e}")
        return False

# --- Zalo Webhook Endpoints ---

@zalo_blueprint.route('/zalo_webhook', methods=['GET'])
def verify_zalo_webhook():
    """X√°c th·ª±c webhook v·ªõi Zalo."""
    # Zalo kh√¥ng d√πng 'hub.mode' hay 'hub.challenge' nh∆∞ Facebook
    # H·ªç ch·ªâ g·ª≠i 1 request GET ƒë·∫øn URL c·ªßa b·∫°n khi b·∫°n c·∫•u h√¨nh
    # Ta c√≥ th·ªÉ ki·ªÉm tra m·ªôt tham s·ªë n√†o ƒë√≥ ƒë·ªÉ ch·∫Øc ch·∫Øn, nh∆∞ng th∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt
    print("ZALO_WEBHOOK_VERIFIED (GET request received)")
    return 'OK', 200 # Ch·ªâ c·∫ßn tr·∫£ v·ªÅ 200 OK l√† ƒë∆∞·ª£c

@zalo_blueprint.route('/zalo_webhook', methods=['POST'])
async def handle_zalo_message():
    """Nh·∫≠n v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Zalo."""
    try:
        data = request.get_json(force=True)
        print(f"üì¨ Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán t·ª´ Zalo: {json.dumps(data, ensure_ascii=False)}")

        # Zalo g·ª≠i c√°c s·ª± ki·ªán kh√°c nhau, ta ch·ªâ x·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n t·ª´ ng∆∞·ªùi d√πng
        if data.get('event_name') == 'user_send_text':
            sender_id = data['sender']['id']
            message_text = data['message']['text']
            
            print(f'Received Zalo message: "{message_text}" from UserID: {sender_id}')
            
            # <<< D√ôNG CHUNG B·ªò N√ÉO PH√ÇN T√çCH >>>
            analysis_result = await perform_full_analysis(message_text, [])
            print(f"‚úÖ Analysis result: {json.dumps(analysis_result, ensure_ascii=False)}")

            # <<< B·∫ÆT ƒê·∫¶U LU·ªíNG H·ªòI THO·∫†I (T∆∞∆°ng t·ª± Messenger) >>>
            if analysis_result and analysis_result.get('is_dangerous'):
                # Lu·ªìng 1: Tin nh·∫Øn NGUY HI·ªÇM
                await send_zalo_message(sender_id, "‚ö†Ô∏è T·ªõ ph√°t hi·ªán tin nh·∫Øn n√†y c√≥ d·∫•u hi·ªáu kh√¥ng an to√†n, c·∫≠u n√™n c·∫©n th·∫≠n nh√©.")
                await asyncio.sleep(CONVERSATION_DELAY)

                reason = analysis_result.get('reason')
                if reason:
                    await send_zalo_message(sender_id, f"üîé C·ª• th·ªÉ l√†: {reason}")
                    await asyncio.sleep(CONVERSATION_DELAY)

                recommend = analysis_result.get('recommend')
                if recommend:
                    await send_zalo_message(sender_id, f"üí° V√¨ v·∫≠y, t·ªõ g·ª£i √Ω c·∫≠u n√™n: {recommend}")
            
            else:
                # Lu·ªìng 2: Tin nh·∫Øn AN TO√ÄN
                await send_zalo_message(sender_id, "‚úÖ T·ªõ ƒë√£ qu√©t v√† th·∫•y tin nh·∫Øn n√†y an to√†n nh√©.")
            # <<< K·∫æT TH√öC LU·ªíNG H·ªòI THO·∫†I >>>

    except Exception as e:
        print(f"üî¥ L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω Zalo webhook: {e}")
    
    return 'OK', 200